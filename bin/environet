#!/usr/local/bin/php -q
<?php

use Environet\Sys\Commands\BaseCommand;
use Environet\Sys\Commands\Console;
use Environet\Sys\Commands\DataNode\Cleanup as DataNodeCleanup;
use Environet\Sys\Commands\DataNode\Install as DataNodeInstall;
use Environet\Sys\Commands\DataNode\MigrateConfig;
use Environet\Sys\Commands\DataNode\PluginCreate;
use Environet\Sys\Commands\DataNode\PluginRun;
use Environet\Sys\Commands\DistNode\CalculationCommand;
use Environet\Sys\Commands\DistNode\ExportDb;
use Environet\Sys\Commands\DistNode\InitDb;
use Environet\Sys\Commands\DistNode\Install as DistNodeInstall;
use Environet\Sys\Commands\DistNode\MigrateDb;
use Environet\Sys\Commands\Exceptions\CommandException;
use Environet\Sys\Commands\Tools\GenerateKeys;
use Environet\Sys\Commands\Tools\GenerateSignature;
use Environet\Sys\Config;

ini_set('memory_limit', - 1);

define('SRC_PATH', realpath(__DIR__ . '/..'));

$arguments = $argv;
array_shift($arguments);

require_once SRC_PATH . '/sys/init_autoloader.inc.php';

require_once SRC_PATH . '/sys/constants.inc.php';

$config = new Config();

if ($config->getTimezone()) {
	date_default_timezone_set($config->getTimezone());
}

//Fix some directory permissions
chmod(SRC_PATH . '/data', 0777);

function commandRouter(array $arguments): ?string {
	switch ($arguments[0] ?? null) {
		case 'data':
			switch ($arguments[1] ?? null) {
				case 'tool':
					array_shift($arguments);

					return commandRouter($arguments);
				case 'install':
					return DataNodeInstall::class;
				case 'cleanup':
					return DataNodeCleanup::class;
				case 'plugin':
					switch ($arguments[2] ?? null) {
						case 'create':
							return PluginCreate::class;
						case 'run':
							return PluginRun::class;
						case 'migrate':
							return MigrateConfig::class;
					}
			}
			break;
		case 'dist':
			switch ($arguments[1] ?? null) {
				case 'tool':
					array_shift($arguments);

					return commandRouter($arguments);
				case 'install':
					return DistNodeInstall::class;
				case 'database':
					switch ($arguments[2] ?? null) {
						case 'init':
							return InitDb::class;
						case 'migrate':
							return MigrateDb::class;
						case 'export':
							return ExportDb::class;
					}
					break;
				case 'calc':
					switch ($arguments[2] ?? null) {
						case 'run':
							return CalculationCommand::class;
					}
			}
			break;
		case 'tool':
			switch ($arguments[1] ?? null) {
				case 'keygen':
					return GenerateKeys::class;
				case 'sign':
					return GenerateSignature::class;
			}
	}

	return null;
}

echo "\n";

$console = new Console();
try {

	$commandClass = commandRouter($arguments);
	if (!$commandClass) {
		throw new CommandException('Command not found');
	}
	/** @var BaseCommand $command */
	$command = new $commandClass($console);

	//Build options
	$options = [];
	foreach ($arguments as $key => $argument) {
		if (!is_string($argument)) {
			continue;
		}
		if (preg_match('/^--([a-z0-9\-_]+)((=)(.*))?$/i', trim($argument), $m)) {
			$options[$m[1]] = isset($m[3]) && $m[3] === '=' ? ($m[4] ?? null) : true;
		}
	}

	$exitCode = $command->run($arguments, $options);
} catch (\Exception $exception) {
	$console->writeLine($exception->getMessage(), Console::COLOR_RED);
	$exitCode = 1;
}

echo "\n";
exit($exitCode);




