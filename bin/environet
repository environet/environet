#!/usr/local/bin/php -q
<?php

use Environet\Sys\Commands\BaseCommand;
use Environet\Sys\Commands\Console;
use Environet\Sys\Commands\DataNode\Install as DataNodeInstall;
use Environet\Sys\Commands\DataNode\PluginCreate;
use Environet\Sys\Commands\DataNode\PluginRun;
use Environet\Sys\Commands\DistNode\InitDb;
use Environet\Sys\Commands\DistNode\Install as DistNodeInstall;
use Environet\Sys\Commands\Exceptions\CommandException;
use Environet\Sys\Commands\Tools\GenerateKeys;
use Environet\Sys\Commands\Tools\GenerateSignature;
use Environet\Sys\Config;

define('SRC_PATH', realpath(__DIR__ . '/..'));

$arguments = $argv;
array_shift($arguments);

require_once SRC_PATH.'/sys/init_autoloader.inc.php';

require_once SRC_PATH.'/sys/constants.inc.php';

$config = new Config();

if ($config->getTimezone()) {
	date_default_timezone_set($config->getTimezone());
}

//! Load error handling library
require_once SRC_PATH.'/sys/error.inc.php';

function commandRouter(array $arguments): ?string {
	switch ($arguments[0] ?? null) {
		case 'data':
			switch ($arguments[1] ?? null) {
				case 'tool':
					array_shift($arguments);
					return commandRouter($arguments);
				case 'install':
					return DataNodeInstall::class;
				case 'plugin':
					switch ($arguments[2] ?? null) {
						case 'create':
							return PluginCreate::class;
						case 'run':
							return PluginRun::class;
					}
			}
			break;
		case 'dist':
			switch ($arguments[1] ?? null) {
				case 'tool':
					array_shift($arguments);
					return commandRouter($arguments);
				case 'install':
					return DistNodeInstall::class;
				case 'init':
					switch ($arguments[2] ?? null) {
						case 'database':
							return InitDb::class;
					}
			}
			break;
		case 'tool':
			switch ($arguments[1] ?? null) {
				case 'keygen':
					return GenerateKeys::class;
				case 'sign':
					return GenerateSignature::class;
			}
	}
	return null;
}

echo "\n";
$console = new Console();
try {

	$commandClass = commandRouter($arguments);
	if (!$commandClass) {
		throw new CommandException('Command not found');
	}
	/** @var BaseCommand $command */
	$command = new $commandClass($console);

	$exitCode = $command->run($arguments);
} catch (CommandException $exception) {
	$console->writeLine($exception->getMessage(), Console::COLOR_RED);
	$exitCode = 1;
}

echo "\n";
exit($exitCode);




